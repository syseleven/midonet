//
// Copyright 2014 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Commons";

enum IPVersion {
    V4 = 1;
    V6 = 2;
}

message UUID {
    required uint64 msb = 1;
    required uint64 lsb = 2;
}

message IPAddress {
    required IPVersion version = 1;
    required string address = 2;
}

message IPSubnet {
    required IPVersion version = 1;
    optional string address = 2;
    optional uint32 prefix_length = 3;
}

message MacIp {
    optional string mac = 1;
    optional IPAddress ip = 2;
}

message Int32Range {
    optional int32 start = 1;
    optional int32 end = 2;
}

message MetadataEntry {
    optional string key = 1;
    optional string value = 2;
}

enum RuleDirection {
    EGRESS = 0;
    INGRESS = 1;
}

enum EtherType {
    ARP = 2054;    // 0x0806
    IPV4 = 2048;   // 0x0800
    IPV6 = 34525;  // 0x86dd
}

enum Protocol {
    TCP = 6;      // 0x6
    UDP = 17;     // 0x11
    ICMP = 1;     // 0x1
    ICMPV6 = 58;  // 0x3a

    HOPOPT = 0;
    IGMP = 2;
    GGP = 3;
    IPIP = 4;
    ST = 5;
    CBT = 7;
    EGP = 8;
    IGP = 9;
    BBN_RCC_MON = 10;
    NVP_II = 11;
    PUP = 12;
    ARGUS = 13;
    EMCON = 14;
    XNET = 15;
    CHAOS = 16;
    MUX = 18;
    DCN_MEAS = 19;
    HMP = 20;
    PRM = 21;
    XNS_IDP = 22;
    TRUNK_1 = 23;
    TRUNK_2 = 24;
    LEAF_1 = 25;
    LEAF_2 = 26;
    RDP = 27;
    IRTP = 28;
    ISO_TP4 = 29;
    NETBLT = 30;
    MFE_NSP = 31;
    MERIT_INP = 32;
    DCCP = 33;
    THREEPC = 34;
    IDPR = 35;
    XTP = 36;
    DDP = 37;
    IDPR_CMTP = 38;
    TPPP = 39;
    IL = 40;
    IPV6_ENCAP = 41;
    SDRP = 42;
    IPV6_ROUTE = 43;
    IPV6_FRAG = 44;
    IDRP = 45;
    RSVP = 46;
    GRE = 47;
    DSR = 48;
    BNA = 49;
    ESP = 50;
    AH = 51;
    I_NLSP = 52;
    SWIPE = 53;
    NARP = 54;
    MOBILE = 55;
    TLSP = 56;
    SKIP = 57;
    IPV6_NONXT = 59;
    IPV6_OPTS = 60;
    PROTO61 = 61;
    CFTP = 62;
    PROTO63 = 63;
    SAT_EXPAK = 64;
    KRYPTOLAN = 65;
    RVD = 66;
    IPPC = 67;
    PROTO68 = 68;
    SAT_MON = 69;
    VISA = 70;
    IPCV = 71;
    CPNX = 72;
    CPHB = 73;
    WSN = 74;
    PVP = 75;
    BR_SAT_MON = 76;
    SUN_ND = 77;
    WB_MON = 78;
    WB_EXPAK = 79;
    ISO_IP = 80;
    VMTP = 81;
    SECURE_VMTP = 82;
    VINES = 83;
    TTP = 84;
    NSFNET_IGP = 85;
    DGP = 86;
    TCF = 87;
    EIGRP = 88;
    OSPF = 89;
    SPRITE_RPC = 90;
    LARP = 91;
    MTP = 92;
    AX25 = 93;
    IPIP94 = 94;
    MICP = 95;
    SCC_SP = 96;
    ETHERIP = 97;
    ENCAP = 98;
    PROTO99 = 99;
    GMTP = 100;
    IFMP = 101;
    PNNI = 102;
    PIM = 103;
    ARIS = 104;
    SCPS = 105;
    QNX = 106;
    AN = 107;
    IPCOMP = 108;
    SNP = 109;
    COMPAQ_PEER = 110;
    IPX_IN_IP = 111;
    VRRP = 112;
    PGM = 113;
    PROTO114 = 114;
    L2TP = 115;
    DDX = 116;
    IATP = 117;
    STP = 118;
    SRP = 119;
    UTI = 120;
    SMP = 121;
    SM = 122;
    PTP = 123;
    ISIS_OVER_IPV4 = 124;
    FIRE = 125;
    CRTP = 126;
    CRUDP = 127;
    SSCOPMCE = 128;
    IPLT = 129;
    SPS = 130;
    PIPE = 131;
    SCTP = 132;
    FC = 133;
    RSVP_E2E_IGNORE = 134;
    MOBILITY_HEADER = 135;
    UDPLITE = 136;
    MPLS_IN_IP = 137;
    MANET = 138;
    HIP = 139;
    SHIM6 = 140;
    WESP = 141;
    ROHC = 142;
    ETHERNET = 143;
    PROTO144 = 144;
    PROTO145 = 145;
    PROTO146 = 146;
    PROTO147 = 147;
    PROTO148 = 148;
    PROTO149 = 149;
    PROTO150 = 150;
    PROTO151 = 151;
    PROTO152 = 152;
    PROTO153 = 153;
    PROTO154 = 154;
    PROTO155 = 155;
    PROTO156 = 156;
    PROTO157 = 157;
    PROTO158 = 158;
    PROTO159 = 159;
    PROTO160 = 160;
    PROTO161 = 161;
    PROTO162 = 162;
    PROTO163 = 163;
    PROTO164 = 164;
    PROTO165 = 165;
    PROTO166 = 166;
    PROTO167 = 167;
    PROTO168 = 168;
    PROTO169 = 169;
    PROTO170 = 170;
    PROTO171 = 171;
    PROTO172 = 172;
    PROTO173 = 173;
    PROTO174 = 174;
    PROTO175 = 175;
    PROTO176 = 176;
    PROTO177 = 177;
    PROTO178 = 178;
    PROTO179 = 179;
    PROTO180 = 180;
    PROTO181 = 181;
    PROTO182 = 182;
    PROTO183 = 183;
    PROTO184 = 184;
    PROTO185 = 185;
    PROTO186 = 186;
    PROTO187 = 187;
    PROTO188 = 188;
    PROTO189 = 189;
    PROTO190 = 190;
    PROTO191 = 191;
    PROTO192 = 192;
    PROTO193 = 193;
    PROTO194 = 194;
    PROTO195 = 195;
    PROTO196 = 196;
    PROTO197 = 197;
    PROTO198 = 198;
    PROTO199 = 199;
    PROTO200 = 200;
    PROTO201 = 201;
    PROTO202 = 202;
    PROTO203 = 203;
    PROTO204 = 204;
    PROTO205 = 205;
    PROTO206 = 206;
    PROTO207 = 207;
    PROTO208 = 208;
    PROTO209 = 209;
    PROTO210 = 210;
    PROTO211 = 211;
    PROTO212 = 212;
    PROTO213 = 213;
    PROTO214 = 214;
    PROTO215 = 215;
    PROTO216 = 216;
    PROTO217 = 217;
    PROTO218 = 218;
    PROTO219 = 219;
    PROTO220 = 220;
    PROTO221 = 221;
    PROTO222 = 222;
    PROTO223 = 223;
    PROTO224 = 224;
    PROTO225 = 225;
    PROTO226 = 226;
    PROTO227 = 227;
    PROTO228 = 228;
    PROTO229 = 229;
    PROTO230 = 230;
    PROTO231 = 231;
    PROTO232 = 232;
    PROTO233 = 233;
    PROTO234 = 234;
    PROTO235 = 235;
    PROTO236 = 236;
    PROTO237 = 237;
    PROTO238 = 238;
    PROTO239 = 239;
    PROTO240 = 240;
    PROTO241 = 241;
    PROTO242 = 242;
    PROTO243 = 243;
    PROTO244 = 244;
    PROTO245 = 245;
    PROTO246 = 246;
    PROTO247 = 247;
    PROTO248 = 248;
    PROTO249 = 249;
    PROTO250 = 250;
    PROTO251 = 251;
    PROTO252 = 252;
    PROTO253 = 253;
    PROTO254 = 254;
    PROTO255 = 255;
}

enum LBStatus {
    ACTIVE = 1;
    INACTIVE = 2;

    // All V2 PoolMembers should have this status, which indicates that the
    // actual status is in state storage.
    MONITORED = 3;
}

enum LogEvent {
    ACCEPT = 1;
    DROP = 2;
    ALL = 3;
}

message Condition {
    // Condition fields
    optional bool conjunction_inv = 1;
    optional bool match_forward_flow = 2;
    optional bool match_return_flow = 3;
    repeated UUID in_port_ids = 4;
    optional bool in_port_inv = 5;
    repeated UUID out_port_ids = 6;
    optional bool out_port_inv = 7;
    optional UUID port_group_id = 8;
    optional bool inv_port_group = 9;
    optional UUID ip_addr_group_id_src = 10;
    optional bool inv_ip_addr_group_id_src = 11;
    optional UUID ip_addr_group_id_dst = 12;
    optional bool inv_ip_addr_group_id_dst = 13;
    optional int32 dl_type = 14;
    optional bool inv_dl_type = 15;
    optional string dl_src = 16;
    optional int64 dl_src_mask = 17;  // Top 16 bits ignored.
    optional bool inv_dl_src = 18;
    optional string dl_dst = 19;
    optional int64 dl_dst_mask = 20;  // Top 16 bits ignored.
    optional bool inv_dl_dst = 21;
    optional int32 nw_tos = 22;
    optional bool nw_tos_inv = 23;
    optional int32 nw_proto = 24;
    optional bool nw_proto_inv = 25;
    optional IPSubnet nw_src_ip = 26;
    optional IPSubnet nw_dst_ip = 27;
    optional Int32Range tp_src = 28;
    optional Int32Range tp_dst = 29;
    optional bool nw_src_inv = 30;
    optional bool nw_dst_inv = 31;
    optional bool tp_src_inv = 32;
    optional bool tp_dst_inv = 33;
    optional UUID traversed_device = 34;
    optional bool traversed_device_inv = 35;

    enum FragmentPolicy {
        ANY = 1;
        NONHEADER = 2;
        HEADER = 3;
        UNFRAGMENTED = 4;
    }
    optional FragmentPolicy fragment_policy = 36;

    optional bool no_vlan = 60;
    optional uint32 vlan = 61;

    optional IPSubnet icmp_data_src_ip = 62;
    optional bool icmp_data_src_ip_inv = 63;
    optional IPSubnet icmp_data_dst_ip = 64;
    optional bool icmp_data_dst_ip_inv = 65;

    optional UUID in_port_group_id = 66;
    optional bool inv_in_port_group = 67;
    optional UUID out_port_group_id = 68;
    optional bool inv_out_port_group = 69;

    optional bool match_nw_dst_rewritten = 70;
    // end of condition fields
}
